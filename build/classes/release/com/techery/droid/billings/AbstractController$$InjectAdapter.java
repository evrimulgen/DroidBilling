// Code generated by dagger-compiler.  Do not edit.
package com.techery.droid.billings;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binder<AbstractController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code AbstractController} and its
 * dependencies.
 * 
 * Being a {@code MembersInjector<AbstractController>} and handling injection
 * of annotated fields.
 */
public final class AbstractController$$InjectAdapter extends Binding<AbstractController>
    implements MembersInjector<AbstractController> {
  private Binding<de.greenrobot.event.EventBus> bus;
  private Binding<android.content.Context> context;

  public AbstractController$$InjectAdapter() {
    super(null, "members/com.techery.droid.billings.AbstractController", NOT_SINGLETON, AbstractController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    bus = (Binding<de.greenrobot.event.EventBus>) linker.requestBinding("de.greenrobot.event.EventBus", AbstractController.class, getClass().getClassLoader());
    context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", AbstractController.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(bus);
    injectMembersBindings.add(context);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<AbstractController>}.
   */
  @Override
  public void injectMembers(AbstractController object) {
    object.bus = bus.get();
    object.context = context.get();
  }
}
